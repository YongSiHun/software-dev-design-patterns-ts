/**
 * 추상팩토리 (Abstract Factory)
 * - 개요
 * 연관성이 있는 객체 군이 여러 개 있을 경우 이들을 묶어 추상화하고,
 * 어떤 구체적인 상황이 주어지면 팩토리 객체에서 묶은 객체군을 구현
 * 
 * - 필요성
 * 클라이언트에서 특정 객체를 사용할 때 팩토리 클래스만을 참조하여 특정 객체에 대한 
 * 구현부를 감추어 역할과 구현을 분리시킬 수 있다
 * 
 * - 장점
 * 객체를 생성하는 코드를 분리하여 클라이언트 코드와 결합도를 낮출 수 있다
 * 단일 책임 원칙 준수
 * 개발 / 폐쇄 원칙 준수
 * 
 * - 단점
 * 각 구현체마다 팩토리 객체들을 모두 구현해주어야 하기 때문에 객체가 늘어날때마다 클래스가 증가하여 코드의 복잡성이 증가한다
 * 기존 추상 팩토리의 세부사항이 변경되면 모든 팩토리의 수정이 필요해진다 (팩토리와 서브 클래스의 수정 필요)
 * 새로운 종류가 추가되면 팩토리 구현 로직 자체를 변경해야한다
 *  
 * - 현실의 예시
 * 모니터, 마우스, 키보드를 묶은 전자 제품군이 있을때 이들의 집합이 브랜드명으로 갈래가 나뉘는 경우
 * 삼성, 애플, 로지텍 제품군으로 나누어 구현
 */